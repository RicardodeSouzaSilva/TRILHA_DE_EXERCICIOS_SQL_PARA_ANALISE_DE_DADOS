/**********************************************************************************************
üéØ TRILHA DE EXERC√çCIOS ‚Äî SQL PARA AN√ÅLISE DE DADOS
  - Cria√ß√£o de tabelas, integridade referencial e jun√ß√µes
  - Operadores UNION, JOIN, LEFT/RIGHT/FULL/CROSS JOIN
  - Filtros, agrupamentos, CTEs e subconsultas
**********************************************************************************************/

-- ============================================================================================
-- üß© N√çVEL 1 ‚Äî FUNDAMENTOS E RECUPERA√á√ÉO DE DADOS
-- ============================================================================================

-- 1Ô∏è [B√ÅSICO] Exiba todos os produtos cadastrados.
-- Mostre as colunas: nome, categoria e pre√ßo.
-- Ordene pelo nome do produto em ordem alfab√©tica.
select * from cap08.produtos;

-- 2Ô∏è [B√ÅSICO] Liste apenas os clientes do estado de "SP" que sejam do tipo "pessoa jur√≠dica".
-- Mostre nome, sobrenome e tipo do cliente.
-- Ordene pelo nome do cliente.

SELECT *                                    -- Traz todas as colunas da tabela (avalie se precisa mesmo de todas)
FROM cap08.clientes                         -- Fonte: tabela de clientes
WHERE estado = 'SP'                         -- Filtro 1: apenas clientes do estado de S√£o Paulo
  AND tipo = 'pessoa jur√≠dica';             -- Filtro 2: apenas clientes cujo tipo √© 'pessoa jur√≠dica'


-- 3Ô∏è [B√ÅSICO] Exiba todos os nomes dos estudantes do ensino m√©dio e da universidade, sem duplicar registros.
-- Use o operador UNION.

SELECT nome                               -- 1) Pega os nomes do ensino m√©dio
FROM cap08.estudantes_ensino_medio
UNION                                     -- 2) UNION remove duplicados automaticamente
                                          --    (diferente de UNION ALL, que mant√©m duplicados)
SELECT nome                               -- 3) Pega os nomes da universidade
FROM cap08.estudantes_universidade
ORDER BY nome;                            -- 4) Ordena o resultado final j√° unificado por 'nome'

 

-- 4Ô∏è [B√ÅSICO] Exiba todos os nomes dos estudantes, incluindo duplicatas.
-- Use o operador UNION ALL.
SELECT nome                                   -- 1) Nomes dos alunos do ensino m√©dio
FROM cap08.estudantes_ensino_medio
UNION ALL                                     -- 2) Junta resultados SEM remover duplicados
                                              --    (se o mesmo nome existir nas duas tabelas, aparecer√° 2x)
SELECT nome                                   -- 3) Nomes dos alunos da universidade
FROM cap08.estudantes_universidade
ORDER BY nome;                                -- 4) Ordena o RESULTADO FINAL (ap√≥s o UNION ALL) por 'nome'

-- 5Ô∏è [B√ÅSICO] Una as tabelas de estudantes mostrando duas colunas:
-- nome e especialidade.
-- Para estudantes do ensino m√©dio, exiba "N√£o se aplica" na coluna especialidade.
SELECT 
    nome,                                -- 1) Nome do aluno do ensino m√©dio
    'N√£o se aplica' AS especialidade     -- 2) Literal para preencher a 2¬™ coluna, padronizando o esquema
FROM cap08.estudantes_ensino_medio       -- 3) Fonte: estudantes do ensino m√©dio
UNION                                    -- 4) UNION remove duplicatas (DISTINCT) considerando *ambas* as colunas
                                         --    (diferente de UNION ALL, que manteria duplicadas)
SELECT 
    nome,                                -- 5) Nome do aluno da universidade
    especialidade                        -- 6) Especialidade do aluno (curso/√°rea)
FROM cap08.estudantes_universidade       -- 7) Fonte: estudantes da universidade
ORDER BY nome;                           -- 8) Ordena o resultado final unificado pelo nome


-- ============================================================================================
-- ‚öôÔ∏è N√çVEL 2 ‚Äî JUN√á√ïES E INTEGRIDADE REFERENCIAL
-- ============================================================================================

-- 6Ô∏è [INTERMEDI√ÅRIO] Liste o nome do cliente, o produto comprado, a quantidade e a data do pedido.
-- Combine as tabelas de pedidos, clientes e produtos usando INNER JOIN.
SELECT
    cli.nome  AS nome_cliente,             -- Nome do cliente (chave da agrega√ß√£o)
    prod.nome AS nome_produto,             -- Nome do produto (chave da agrega√ß√£o)
    SUM(ped.quantidade) AS quantidade_comprada,  -- Soma das quantidades dentro do grupo
    ped.data_pedido AS data_pedido         -- Data do pedido (entra no GROUP BY ‚Üí granularidade por data exata)
FROM cap08.clientes AS cli                 -- Tabela de clientes (lado 1 do relacionamento)
INNER JOIN cap08.pedidos AS ped            -- Junta apenas pedidos que t√™m cliente
    ON cli.id_cliente = ped.id_cliente     -- Regra de jun√ß√£o cliente ‚Üî pedido
INNER JOIN cap08.produtos AS prod          -- Junta apenas pedidos que t√™m produto
    ON ped.id_produto = prod.id_produto    -- Regra de jun√ß√£o pedido ‚Üî produto
GROUP BY
    cli.nome,                              -- Agrupa por cliente
    prod.nome,                             -- Agrupa por produto
    ped.data_pedido                        -- Agrupa por data: cada dia/instante vira uma linha distinta
ORDER BY
    nome_cliente;                          -- Ordena alfabeticamente pelo cliente


-- 7Ô∏è [INTERMEDI√ÅRIO] Liste todos os pedidos da tabela pedidos_sem_ir.
-- Mostre o nome do cliente e o nome do produto, mesmo que algum campo esteja ausente (NULL).
-- Use LEFT JOIN.

SELECT
    cli.nome  AS nome_cliente,      -- Nome do cliente (coluna exibida)
    prod.nome AS nome_produto       -- Nome do produto (pode vir NULL se o cliente n√£o tiver pedidos)
FROM cap08.clientes AS cli          -- Tabela base: lista todos os clientes
LEFT JOIN cap08.pedidos_sem_ir AS ped   -- Mant√©m o cliente mesmo sem pedido (ped.* vira NULL)
    ON cli.id_cliente = ped.id_cliente   -- Chave cliente ‚Üí pedido
LEFT JOIN cap08.produtos AS prod        -- Tenta trazer o produto do pedido
    ON ped.id_produto = prod.id_produto  -- Chave pedido ‚Üí produto (se ped for NULL, prod tamb√©m ficar√° NULL)
ORDER BY
    nome_cliente;                    -- Ordena alfabeticamente pelos clientes

-- 8Ô∏è [INTERMEDI√ÅRIO] Retorne todos os produtos que nunca foram pedidos.
-- Mostre id_produto, nome e pre√ßo.
-- Use RIGHT JOIN e filtre registros sem correspond√™ncia.
SELECT
    prod.nome AS nome_produto,              	-- Alias leg√≠vel para o nome do produto (ser√° usado no GROUP BY/ORDER BY)
    SUM(ped.quantidade) AS quantidade_comprada -- Soma das quantidades por produto (pode virar NULL se n√£o houver pedidos)
FROM cap08.clientes AS cli                  	-- Tabela de clientes (apenas para ligar com pedidos)
RIGHT JOIN cap08.pedidos AS ped             	-- RIGHT JOIN garante manter todos os pedidos (mesmo sem cliente correspondente)
    ON cli.id_cliente = ped.id_cliente      	-- Chave de jun√ß√£o cliente ‚Üí pedido
RIGHT JOIN cap08.produtos AS prod           	-- RIGHT JOIN final garante manter TODOS os produtos
    ON ped.id_produto = prod.id_produto     	-- Chave de jun√ß√£o pedido ‚Üí produto
GROUP BY prod.nome                          	-- Agrega por produto para calcular a soma das quantidades
HAVING SUM(ped.quantidade) IS NULL          	-- Filtro: produtos sem qualquer pedido (SUM sobre s√≥ NULLs ‚Üí NULL)
ORDER BY nome_produto;                      	-- Ordena alfabeticamente a lista de produtos sem compras

-- 9Ô∏è [INTERMEDI√ÅRIO] Retorne todos os pedidos que n√£o t√™m produto associado.
-- Use RIGHT JOIN com a tabela pedidos_sem_ir.
-- Mostre id_pedido, quantidade e data do pedido.
 

-- 10 [INTERMEDI√ÅRIO] Exiba o resultado de um FULL JOIN entre as tabelas produtos e pedidos.
-- Observe a diferen√ßa em rela√ß√£o ao INNER JOIN.


-- 11Ô∏è [INTERMEDI√ÅRIO] Fa√ßa um CROSS JOIN entre produtos e pedidos.
-- Quantas combina√ß√µes s√£o retornadas?
-- (Dica: √© o produto cartesiano entre as tabelas.)


-- 12Ô∏è [INTERMEDI√ÅRIO] Use SELF JOIN na tabela pedidos.
-- Liste pares de pedidos realizados pelo mesmo cliente (id_cliente).
-- Evite duplicar pares invertidos.


-- ============================================================================================
-- üìä N√çVEL 3 ‚Äî AGREGA√á√ïES E FILTROS CONDICIONAIS
-- ============================================================================================

-- 13Ô∏è [AVAN√áADO] Calcule a m√©dia de quantidade pedida por produto.
-- Mostre o nome do produto e a m√©dia arredondada para 2 casas decimais.
-- Ordene o resultado pelo nome do produto.


-- 14 [AVAN√áADO] Exiba apenas os produtos ‚ÄúProduto D‚Äù e ‚ÄúProduto H‚Äù.
-- Mostre o nome e a quantidade pedida.
-- Ordene os resultados por nome do produto.


-- 15Ô∏è [AVAN√áADO] Calcule a m√©dia de quantidade dos produtos ‚ÄúProduto D‚Äù e ‚ÄúProduto H‚Äù,
-- mas exiba apenas aqueles cuja m√©dia seja maior que 42.
-- Use GROUP BY, HAVING e ROUND.


-- 16Ô∏è [AVAN√áADO] Mostre a m√©dia de quantidade pedida por cliente e produto.
-- Inclua apenas produtos ‚ÄúProduto D‚Äù e ‚ÄúProduto H‚Äù.
-- Ordene pelo nome do produto.


-- 17Ô∏è [AVAN√áADO] Encontre os produtos com maior quantidade pedida em um √∫nico pedido.
-- Mostre o nome do produto, nome do cliente e quantidade.
-- Use subconsulta correlacionada.


-- 18Ô∏è [AVAN√áADO] Crie uma CTE (Common Table Expression) chamada "ProdutosMaisVendidos".
-- Liste os 5 produtos mais vendidos (por soma total de quantidade).
-- Em seguida, exiba para cada um desses produtos:
--   - nome do produto,
--   - categoria,
--   - cliente que fez o maior pedido em quantidade.
-- Utilize JOINs e uma subconsulta para identificar o maior pedido de cada produto.


-- 19Ô∏è [AVAN√áADO] Calcule o total de vendas por categoria.
-- Mostre: categoria, soma total de quantidades e pre√ßo m√©dio.
-- Ordene da categoria mais vendida para a menos vendida.


-- 20Ô∏è [AVAN√áADO] Crie uma consulta que identifique poss√≠veis falhas de integridade referencial.
-- Retorne pedidos onde id_cliente ou id_produto n√£o possuem correspond√™ncia nas tabelas principais.
-- Use LEFT JOIN e filtre registros com valores NULL.
